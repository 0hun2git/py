python() { 
    int: [ print(5), print(-10), print(3.14), print(1000), print(5+3), print(2*8), print(3*(3+1)) ],
    str: [ print('풍선'), print("나비"), print("ㅋㅋㅋㅋㅋ"), print("ㅋ"*9)],
    boolean: [ print(5>10), print(5<10), print(True), print(False), print(not True), print(not False), print(not (5>10))],
    var: [ 
        animal = "강아지",
        name = "연탄이",
        age = 4,
        hobby = "산책",
        is_adult = age>=3,    
        #print("우리집 강아지의 이름은 연탄이예요."), 
        #print("연탄이는 4살이며, 산책을 아주 좋아해요"), 
        #print("연탄이는 어른일까요? True"),
        print("우리집 " + animal + "의 이름은 " + name + "예요."), 
        print( name + "는 "+ str(age) +"살이며, " + hobby +"을 아주 좋아해요"),
        print( name + "는 어른일까요? "+str(is_adult)),    
        animal = "고양이",
        name = "해피",
        age = 4,
        hobby = "낮잠",
        is_adult = age>=3,
        print("우리집 " + animal + "의 이름은 " + name + "예요."),
        hobby="공놀이", 
        #print( name + "는 "+ str(age) +"살이며, " + hobby +"을 아주 좋아해요"),
        print( name, "는 ", age, "살이며, ", hobby, "을 아주 좋아해요"),
        print( name + "는 어른일까요? "+str(is_adult))    
        ],
    comment: [ #, ''', "영역 지정 후 ctrl + /" ],
    operator: {
        +: 1+1 # 2,
        -: 3-2 # 1,
        *: 5*2 # 10,
        /: 6/3 # 2,
        **: 2**3 # 8,
        %: 5%3 # 2,
        //: 5//3 # 1,
        >: 10>3 # True,
        <: 10<3 # False,
        >=: 4>=7 # False,
        <=: 5<=5 # True,
        ==: 3+4 == 7 # True,
        !=: 1!=3 # True,
        not: not(1!=3) # False,
        and: (3>0) and (3<5) # True,
        &: (3>0) and (3<5) # True,
        or: (3>0) or (3<5) # True,
        |: (3>0) or (3<5) # True,
        >>: 5>4>3 # True,
        +=: [ 
            number = 2,
            # number = number + 1 # 3,
            number += 1 # 3
            ],
        -=: number -= 1 # 1,
        -=: number -= 1 # 1,
        *=: number *= 1 # 1,
        /=: number /= 1 # 1,    
        %=: number %= 1 # 0,
        },
    int_function: [
        abs(-5) # 5,
        pow(4, 2) # 16,
        max(5, 12) # 12,
        min(5, 12) # 5,
        round(4.99) # 5
        ],
    math_function: [
        from math import *,
        floor(4.99) # 내림 4,
        ceil(3.14) # 올림 4,
        sqrt(16) # 제곱근 4
        ],
    random_function: [
        from random import *,
        random() # 0.0 ~ 1.0 미만의 임의의 값 생성,
        random()*10 # 0.0 ~ 10.0 미만의 임의의 값 생성,
        int(random()*10) # 0 ~ 10 미만의 임의의 값 생성,
        int(random()*10) + 1 # 1 ~ 11 미만의 임의의 값 생성,
        int(random()*45) + 1 # 1 ~ 46 미만의 임의의 값 생성,
        randrange(1,46) # 1 ~ 46 미만의 임의의 값 생성,
        randint(1,45) # 1 ~ 45 이하의 임의의 값 생성
        ],
    sentence: [
        ': '나는',
        ": "0hun2",
        """: """이고,
        돈을 좋아합니다."""
    ],
    slice: [
        jumin = "990120-1234567",
        print("성별: " + jumin[7]),
        print("년: " + jumin[0:2]),
        print("월: " + jumin[2:4]),
        print("일: " + jumin[4:6]),
        print("생년월일: " + jumin[:6]),
        print("뒤7자리: " + jumin[7:]),
        print("뒤7자리 (뒤에부터): " + jumin[-7:]),   
    ],
    str_func[
        python = "Python is Amazing",
        print(python.lower()),
        print(python.upper()),
        print(python[0].isupper()),
        print(len(python)),
        print(python.replace("Python, Java")),
        index = python.index("n"),
        print(index),
        index = python.index("n", index + 1),
        print(index),
        #print(python.index("Java")),
        print(python.find("Java")),
        print(python.count("n"))
    ],
    str_format[
        print("a"+"b"),
        print("a", "b"),
        #방법1,
        print("나는 %d살 입니다." % 20),
        print("나는 %s을 좋아해요." % "파이썬"),
        print("Apple은 %c로 시작해요." % "A"),
        print("나는 %s살 입니다." % 20),
        print("나는 %s과 %s색을 좋아해요." % ("파란", "빨간")),
        #방법2,
        print("나는 {}살 입니다.".format(20)),
        print("나는 {}색과 {}색을 좋아해요.".format("파란", "빨간")),
        print("나는 {1}색과 {0}색을 좋아해요.".format("파란", "빨간")),
        #방법3,
        print("나는 {age}살이며, {color}색을 좋아해요.".format(age=20, color="빨간")),
        print("나는 {age}살이며, {color}색을 좋아해요.".format(color="빨간", age=20)),
        #방법4,
        age = 20
        color = "빨간"
        print(f"나는 {age}살이며, {color}색을 좋아해요.")
    ],
    str_excape(\)[
        print("백문이 불여일견\n백견이 불여일타"),
        print("저는 '0hun2' 입니다."),
        print('저는 "0hun2" 입니다.'),
        print("저는 \"0hun2\" 입니다."),
        print("저는 \'0hun2\' 입니다."),
        print("저는 \"0hun2\" 입니다."),
        print("C:\\Users\\0hun2"),
        print("Red Apple\rPine"),
        print("Redd\bApple"),
        print("Red\tApple")
    ],
    list[
        list.index(""),
        list.append(""),
        list.insert("",1),
        list.pop(),
        list.count(""),
        list.sort(),
        list.reverse(),
        list.clear(),
        list = [],
        mix_list = ["", 20, True],
        list.extend(mix_list)
    ],
    dictionary(object) [
        cab = {3:"0hun3",100:"0hun100"},
        cab[3],
        cab[100],
        cab[5], # exception
        cab.get(3),
        cab.get(100),
        cab.get(5), # None
        3 in cab, # True
        5 in cab, # False
        cab[3] = "0hun31", # update
        cab[4] = "0hun4", # add
        del cab[3], # delete
        cab.keys(),
        cab.values(),
        cab.itmes(),
        cab.clear()
    ],
    tuple [ # 리스트 보다 빠름, 지정된 값만 사용할 수 있음
        menu = ( "돈까스", "치즈까스" ),
        menu[0],
        menu[1],
        # name = "0hun2",
        # age = 20,
        # hobby = "코딩",
        (name, age, hobby) = ("0hun2", 20, "코딩")
    ],
    set [ # 중복안됨, 순서없음  
        java = {"a","b","c","c"},
        python= set(["a","d"]),
        java&python, # 교집합
        java.intersection(python), 
        java|python, # 합집합
        java.union(python),
        java-python, # 차집합
        java.difference(python),
        python.add("c"), # 자료 추가
        python.remove("c") # 자료 제거
    ],
    type [
        menu = {"coffee", "milk", "juice"},
        type(menu),
        list(menu),
        set(menu),
        tuple(menu)
    ],
    if [
        weather = input("오늘날씨는 어때요? ")
        if weather == "비" or weather == "눈":
            print("우산을 챙기세요.")
        elif weather == "미세먼지":
            print("마스클을 챙기세요.")
        else:
            print("준비물 필요 없어요.")
    ],
    for [ # for문은 반복 횟수를 알고 있을 때 주로 사용
        for waiting_no in range(0, 5): # [0,1,2,3,4]
            print("대기번호 : {}".format(waiting_no))
    ],
    while [ # while문은 조건에 따라 반복할 때 주로 사용
        customer = "0hun2"
        index = 5 
        while index >= 1:
            print()
            index -= 1
            if index == 0:
                print(),
        customer = "0hun2"
        person = ""
        while Person != customer:
            print()
            person=input()            
    ],
    continue&break [
        absent = [ 2, 5 ],
        no_book = [ 7 ],
        for student in range(1,11):
            if student in absent:
                continue
            elif student in no_book:
                break
            print()
    ],
    for [ # 한 줄 for
        student = [1,2,3,4,5]
        student = [i+100 for i in student]
        student = [len(i) for i in student]
        student = [i.upper for i in student]
    ],
    def [ # 함수 호출
        def open_account():
            print("새로운 계좌가 생성되었습니다.")
        open_account() # 호출
    ],
    def [ # 함수에 전달값과 반환값
        def deposit(balance, money):
            print("입금이 완료되었습니다. 잔액은 {0} 원 입니다.".format(balance + money))
            return balance + money
        def withdraw(balance, money):
            if balance >= money:
                print("출금이 완료되었습니다. 잔액은{} 원 입니다.".format(balance-money))
                return balance - money
            else:
                print("출금이 완료되지 않았습니다. 잔액은{} 원 입니다.".format(balance))
                return balance
        def withdraw_night(balance, 500)
            commission = 100
            return commission, balance - money - commission
        balance = 0
        balance = deposit(balance, 1000)
        balance = withdraw(balance, 1000)
        balance = withdraw(balance, 500)
        commission, balance = withdraw_night(balance, 500)
        print("수수료 {0}원 이며, 잔액은 {1} 원 입니다.".format(commission, balance))
    ],
    def [ # 기본값
        def profile(name, age=17, main_lang="python"): # 기본값
            print("이름 : {0}\나이: {1}\t주 사용 언어: {2}"\
            .format(name,age,main_lang))
        # profile("0hun2",20,"java")
        profile("0hun2")
    ],
    def [ # 키워드값
        def profile(name, age=17, main_lang="python"): # 기본값
            print("이름 : {0}\나이: {1}\t주 사용 언어: {2}"\
            .format(name,age,main_lang))
        # profile("0hun2",20,"java")
        profile(name="0hun2") # 키워드값
    ],
    def [ # 가변인자
        def profile(name, age, *language): # 가변인자
            print("이름 : {0}\나이: {1}\t.format(name,age), end = " ")
            for lang in language:
                print(lang1, end = " ")
        profile("0hun2", 20, "Python", "java")
    ],
    var [
        gun = 10 # 전역 변수
        def check(soldier):
            #global gun # 전역 변수 호출
            #gun = 20 # 지역 변수
            gun = gun - soldier
        check(1)
        def check_return(gun, soldier):
            #global gun # 전역 변수 호출
            #gun = 20 # 지역 변수
            gun = gun - soldier
            return gun
        gun = check(gun, 1)
    ],
    output [
        print("python", "java"),
        print("python", "java", sep=","),
        print("python", "java","C#", sep="vs"),
        print("python", "java","C#", sep="vs", end="?"), # 기본 줄바꿈 되는데 end를 쓰고 줄바꿈 하려면 \n
        print("python", "java","C#", file=sys.stdout), # file=sys.stdout 출력
        print("python", "java","C#", file=sys.stderr), # file=sys.stderr 에러
        scores = {"수학": 0,"영어":10, "코딩": 50},
        for subject, score in scores.items():
            print(subject.ljust(8), str(score).rjust(4), sep=":") # "".ljust(i), "".rjust(i),
        for num in  range(1,21):
            print("대기번호: " + str(num).zfill(3)) # "".zfill(i) i만큼 0을 채워라.
    ],
    input [
        answer = input("아무거나 입력하세요 : "),
        print(type(answer))
        print("입력하신 값은" + answer + "입니다.")
    ],
    output_form [ # {}.format("")
        print("{0: >10}".format(500)), # 빈자리는 빈공간으로 두고, 오른쪽 정렬, 총 10자리로 표기
        print("{0: >+10}".format(500)), # 양수일 떄 +로 표시, 음수일 땐 -로 표시
        print("{0: >+10}".format(-500)), # 양수일 떄 +로 표시, 음수일 땐 -로 표시
        print("{0:_<+10}".format(500)), # 왼쪽 정렬하고, 빈칸은 _로 표시
        print("{0:,}).format(10000000000), # 3자리 마다 콤마를 찍어주기
        print("{0:+,}).format(10000000000), # 3자리 마다 콤마를 찍어주기, +-부호도 붙이기
        print("{0:+,}).format(-10000000000), # 3자리 마다 콤마를 찍어주기, +-부호도 붙이기
        print("{0:^<+30,}).format(10000000000), # 3자리 마다 콤마를 찍어주기, +-부호도 붙이기, 자릿수 30칸 확보하기
        print("{0:f".format(5/3)}), # 소수점 출력
        print("{0:.2f".format(5/3)}), # 소수점 3째자리 반올림 출력
    ],
    file_rw [
        score_file = open("score.txt", "w", encoding="utf8"), # 처음쓰기
        print("수학: 0", file=score_file),
        print("영어: 0", file=score_file),
        scor.close(), # 파일 닫기
        score_file = open("score.txt", "a", encoding="utf8"), # 이어쓰기
        print("과학: 0", file=score_file),
        print("\n코딩: 0", file=score_file),
        scor.close(), # 파일 닫기
        score_file = open("score.txt", "r", encoding="utf8"), # 다 읽어오기,
        print(score_file.read()),
        score_file.close(), # 파일 닫기
        score_file = open("score.txt", "r", encoding="utf8"), # 줄마다 읽어오기
        while True:
            line=score_file.readline()
            if not line:
                break
            print(line, end=""),
        score_file.close(), # 파일 닫기
        lines = score_file.readline() # 줄마다 읽어 와서 리스트에 담은 후 한 줄씩 출력하기
        for line in lines:
            print(line, end="")
        score_file.close()
    ],
    pickle [ # bin file로 만드는 라이브러리
        import pickle,
        profile_file = open ("profile.pickle","wb"), # bin file로 쓰기
        profile = {"이름":"0hun2", "나이":20, "취미":["코딩", "테스트"]}
        pickle.dump(profile,profile_file),
        profile_file.close(),
        profile_file = open ("profile.pickle","rb"), # bin file 읽어오기
        profile = pickle.load(profile_file),
        profile_file.close()
    ],
    with [ # open(), close() 를 한 줄로
        import pickle,
        with open("profile.pickle","rb") as profile_file: # bin 파일 읽어오기
            print(pickle.load(profile_file)),
        with open("study.txt", "w", encoding="utf8") as study_file: # 파일 쓰기
            study_file.write("파이썬을 열심히 공부하고 있어요.")
        with open("study.txt", "r", encoding="utf8") as study_file: # 파일 읽어오기
            print(study_file.read())
    ],
    class [
        객체, 
        인스턴스, 
        멤버변수, 
        외부에서 멤버변수 추가,
        메소드, 
        상속, 
        다중상속, 
        super, 
        메소드 오버라이드
    ],
    try_except [
        try:
            #num1 = int(input(첫 번쩨 숫지를 입력하세요 : "))
            #num2 = int(input(en 번쩨 숫지를 입력하세요 : "))
            #print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
            nums = []
            nums.append(int(input(첫 번쩨 숫지를 입력하세요 : ")))
            nums.append(int(input(두 번쩨 숫지를 입력하세요 : ")))
            print("{0} / {1} = {2}".format(nums[0], nums[1], nums[2]))
        except ValueError:
            print("에러! 잘못된 값을 입력하였습니다.")
        except ZeroDivisionError as err:
            print(err) # 0으로 나누었을때 오류 처리
        except Exception as err`:
            print("알 수 없는 에러가 발생하였습니다.")
            print(err)
    ],
    파이썬에서 정의한 에러발생시키기 [
        try:
            num1 = int(input(첫 번쩨 숫지를 입력하세요 : "))
            num2 = int(input(en 번쩨 숫지를 입력하세요 : "))
            if num1 >= 10 or num2 >= 10: # 조건에 맞으면
                raise ValueError # ValueError 발생시키기 as raise
            print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
        except ValueError:
            print("에러! 잘못된 값을 입력하였습니다.")


    ],
    사용자가 정의한 에러 발생시키기 [
        class BigNumberError(Exception):
            def __init__(self, msg)
                self.msg
        try:
            num1 = int(input(첫 번쩨 숫지를 입력하세요 : "))
            num2 = int(input(en 번쩨 숫지를 입력하세요 : "))
            if num1 >= 10 or num2 >= 10: # 조건에 맞으면
                raise BigNumberError("입력값: {0}, {1}".format(num1, num2)) # BigNumberError 발생시키기 as raise
            print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
        except ValueError:
            print("에러! 잘못된 값을 입력하였습니다.")
        except BigNumberError as err:
            print("에러! 잘못된 값을 입력하였습니다.")
            print(err)
    ], 
    finally [
        class BigNumberError(Exception):
            def __init__(self, msg)
                self.msg
        try:
            num1 = int(input(첫 번쩨 숫지를 입력하세요 : "))
            num2 = int(input(en 번쩨 숫지를 입력하세요 : "))
            if num1 >= 10 or num2 >= 10: # 조건에 맞으면
                raise BigNumberError("입력값: {0}, {1}".format(num1, num2)) # BigNumberError 발생시키기 as raise
            print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
        except ValueError:
            print("에러! 잘못된 값을 입력하였습니다.")
        except BigNumberError as err:
            print("에러! 잘못된 값을 입력하였습니다.")
            print(err)
        finally:
            print("이용해 주셔서 감사합니다.")
    ],
    module [ # 모듈의 확장자는 .py
        from,
        import,
        as
    ],
    package [ # 모듈을 모아놓은 폴더
        __all__
    ],
    __name__ == "__main__" [ # 모듈 직접 실행
    ],
    패키지, 모듈 경로 [
        import inspect,
        print(inspect.getfile(thailand)) # Python

    ],
    pip install [
        google pypi,
        pip show,
        pip install --upgrade,
        pip uninstall
    ],
    내장 함수 [
        google list of python builtins
        input, # 입력
        print, # 출력
        # lst = [1, 2, 3],
        # name = "0hun2",
        dir, # print(dir()), print(dir(random)), print(dir(lst)), print(dir(name)) 사용할 수 있는 함수 목록을 보여줌
    ], 
    외장 함수 [
        google list of python modules,
        glob, # 윈도우의 dir/w
        import glob,
        print(glob.glob("*.py")),
        import os,
        print(os.getcwd()),
        folder = "sample.dir",
        if os.path.exists(folder):,
            print("이미 존재하는 폴더 입니다."),
            os.rmdir(folder),
            print(folder, "폴더를 삭제하였습니다."),
        else:,
            os.makedirs(folder),
            print(folder, "폴더를 생성하였습니다."),
        print(os.listdir()),
        import time
        print(time.localtime()),
        print(time.strftime("%Y-%m-%d %H:%M:%S")),
        import datetime
        print("오늘 날짜는 :, datetime.date.today()),
        today = datetime.date.today()
        td = datetime.timedelta(days=100)
        print("우리가 만난지 100일은", today + td)
    ]
}

